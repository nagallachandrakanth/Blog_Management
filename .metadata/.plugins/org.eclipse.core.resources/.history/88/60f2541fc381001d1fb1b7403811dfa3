package com.te.blogmanagement.controller;

import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.te.blogmanagement.dto.LoginDto;
import com.te.blogmanagement.dto.PostDto;
import com.te.blogmanagement.dto.UserDto;
import com.te.blogmanagement.email.UserRegistrationEmail;
import com.te.blogmanagement.response.ApiResponse;
import com.te.blogmanagement.service.BmService;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@RestController
@RequestMapping(path = "/public")
public class BmController {
	private final BmService bmService;
	private final UserRegistrationEmail userRegistrationEmail;

	@PostMapping(path = "/userRegistration")
	public ResponseEntity<ApiResponse<Object>> userRegistration(@RequestBody UserDto userDto) {
		Optional<UserDto> registration = bmService.registration(userDto);
		if (registration.isPresent()) {
         userRegistrationEmail.sendingEmail("chandramailsender@gmail.com", userDto.getEmail(),"Registration Successfull" +"\n"+ "UserName:"
					+ userDto.getMobile()+"\n" + "password:" + userDto.getPasswordHash());
			return ResponseEntity.ok().body(ApiResponse.builder().message("Registration Successfull").build());
		}
		return ResponseEntity.ok().body(ApiResponse.builder().message("Registration Unsuccessfull").build());
	}

	@PostMapping(path = "/postRegistration/{id}")
	public void postRegistration(@PathVariable(name = "id") Integer id, @RequestBody PostDto postDto) {
		bmService.postRegistration(id, postDto);
	}

	@PostMapping(path = "/login")
	public ResponseEntity<ApiResponse<Object>> login(@RequestBody LoginDto loginDto) {
		Boolean isChecked = bmService.login(loginDto);
		if (isChecked) {
			return ResponseEntity.ok().body(ApiResponse.builder().message("Login successfull").build());
		}
		return ResponseEntity.ok().body(ApiResponse.builder().message("Login UnSuccessfull").build());

	}

}
